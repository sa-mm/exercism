var _exercism$xelm$Main$lessThanTen = function (num) {
	return _elm_lang$core$Native_Utils.cmp(num, 10) < 0;
};
var _exercism$xelm$Main$isFirstLetter = F2(
	function (letter, word) {
		return _elm_lang$core$Native_Utils.eq(
			A2(_elm_lang$core$String$left, 1, word),
			letter);
	});
var _exercism$xelm$Main$odd = function (number) {
	return _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], number, 2),
		1);
};
var _exercism$xelm$Main$even = function (number) {
	return _elm_lang$core$Native_Utils.eq(
		A2(_elm_lang$core$Basics_ops['%'], number, 2),
		0);
};
var _exercism$xelm$Main$tests = A2(
	_elm_community$elm_test$Test$describe,
	'Strain',
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_community$elm_test$Test$test,
			'empty keep',
			function (_p0) {
				var _p1 = _p0;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Native_List.fromArray(
						[]),
					A2(
						_exercism$xelm$Strain$keep,
						_exercism$xelm$Main$lessThanTen,
						_elm_lang$core$Native_List.fromArray(
							[])));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'keep everything',
			function (_p2) {
				var _p3 = _p2;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Native_List.fromArray(
						[1, 2, 3]),
					A2(
						_exercism$xelm$Strain$keep,
						_exercism$xelm$Main$lessThanTen,
						_elm_lang$core$Native_List.fromArray(
							[1, 2, 3])));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'keep first and last',
			function (_p4) {
				var _p5 = _p4;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Native_List.fromArray(
						[1, 3]),
					A2(
						_exercism$xelm$Strain$keep,
						_exercism$xelm$Main$odd,
						_elm_lang$core$Native_List.fromArray(
							[1, 2, 3])));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'keep nothing',
			function (_p6) {
				var _p7 = _p6;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Native_List.fromArray(
						[]),
					A2(
						_exercism$xelm$Strain$keep,
						_exercism$xelm$Main$even,
						_elm_lang$core$Native_List.fromArray(
							[1, 3, 5, 7])));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'keep neither first nor last',
			function (_p8) {
				var _p9 = _p8;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Native_List.fromArray(
						[2]),
					A2(
						_exercism$xelm$Strain$keep,
						_exercism$xelm$Main$even,
						_elm_lang$core$Native_List.fromArray(
							[1, 2, 3])));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'keep strings',
			function (_p10) {
				var _p11 = _p10;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Native_List.fromArray(
						['zebra', 'zombies', 'zealot']),
					A2(
						_exercism$xelm$Strain$keep,
						_exercism$xelm$Main$isFirstLetter('z'),
						_elm_lang$core$Native_List.fromArray(
							['apple', 'zebra', 'banana', 'zombies', 'cherimoya', 'zealot'])));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'empty discard',
			function (_p12) {
				var _p13 = _p12;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Native_List.fromArray(
						[]),
					A2(
						_exercism$xelm$Strain$discard,
						_exercism$xelm$Main$lessThanTen,
						_elm_lang$core$Native_List.fromArray(
							[])));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'discard everything',
			function (_p14) {
				var _p15 = _p14;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Native_List.fromArray(
						[]),
					A2(
						_exercism$xelm$Strain$discard,
						_exercism$xelm$Main$lessThanTen,
						_elm_lang$core$Native_List.fromArray(
							[1, 2, 3])));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'discard first and last',
			function (_p16) {
				var _p17 = _p16;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Native_List.fromArray(
						[2]),
					A2(
						_exercism$xelm$Strain$discard,
						_exercism$xelm$Main$odd,
						_elm_lang$core$Native_List.fromArray(
							[1, 2, 3])));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'discard nothing',
			function (_p18) {
				var _p19 = _p18;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Native_List.fromArray(
						[1, 3, 5, 7]),
					A2(
						_exercism$xelm$Strain$discard,
						_exercism$xelm$Main$even,
						_elm_lang$core$Native_List.fromArray(
							[1, 3, 5, 7])));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'discard neither first nor last',
			function (_p20) {
				var _p21 = _p20;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Native_List.fromArray(
						[1, 3]),
					A2(
						_exercism$xelm$Strain$discard,
						_exercism$xelm$Main$even,
						_elm_lang$core$Native_List.fromArray(
							[1, 2, 3])));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'discard strings',
			function (_p22) {
				var _p23 = _p22;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Native_List.fromArray(
						['apple', 'banana', 'cherimoya']),
					A2(
						_exercism$xelm$Strain$discard,
						_exercism$xelm$Main$isFirstLetter('z'),
						_elm_lang$core$Native_List.fromArray(
							['apple', 'zebra', 'banana', 'zombies', 'cherimoya', 'zealot'])));
			})
		]));
var _exercism$xelm$Main$emit = _elm_lang$core$Native_Platform.outgoingPort(
	'emit',
	function (v) {
		return [v._0, v._1];
	});
var _exercism$xelm$Main$main = {
	main: A2(_rtfeldman$node_test_runner$Test_Runner_Node$run, _exercism$xelm$Main$emit, _exercism$xelm$Main$tests),
	flags: _elm_lang$core$Json_Decode$value
};
