var _exercism$xelm$Main$tests = A2(
	_elm_community$elm_test$Test$describe,
	'RunLengthEncoding',
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_community$elm_test$Test$test,
			'the solution is for the correct version of the test',
			function (_p0) {
				var _p1 = _p0;
				return A2(_elm_community$elm_test$Expect$equal, 2, _exercism$xelm$RunLengthEncoding$version);
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'encode simple',
			function (_p2) {
				var _p3 = _p2;
				return A2(
					_elm_community$elm_test$Expect$equal,
					'2A3B4C',
					_exercism$xelm$RunLengthEncoding$encode('AABBBCCCC'));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'decode simple',
			function (_p4) {
				var _p5 = _p4;
				return A2(
					_elm_community$elm_test$Expect$equal,
					'AABBBCCCC',
					_exercism$xelm$RunLengthEncoding$decode('2A3B4C'));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'encode with single values',
			function (_p6) {
				var _p7 = _p6;
				return A2(
					_elm_community$elm_test$Expect$equal,
					'12WB12W3B24WB',
					_exercism$xelm$RunLengthEncoding$encode('WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB'));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'decode with single values',
			function (_p8) {
				var _p9 = _p8;
				return A2(
					_elm_community$elm_test$Expect$equal,
					'WWWWWWWWWWWWBWWWWWWWWWWWWBBBWWWWWWWWWWWWWWWWWWWWWWWWB',
					_exercism$xelm$RunLengthEncoding$decode('12WB12W3B24WB'));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'(decode (encode (...)) combination',
			function (_p10) {
				var _p11 = _p10;
				return A2(
					_elm_community$elm_test$Expect$equal,
					'zzz ZZ  zZ',
					_exercism$xelm$RunLengthEncoding$decode(
						_exercism$xelm$RunLengthEncoding$encode('zzz ZZ  zZ')));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'decode with a x10 value',
			function (_p12) {
				var _p13 = _p12;
				return A2(
					_elm_community$elm_test$Expect$equal,
					'WWWWWWWWWW',
					_exercism$xelm$RunLengthEncoding$decode('10W'));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'encode unicode',
			function (_p14) {
				var _p15 = _p14;
				return A2(
					_elm_community$elm_test$Expect$equal,
					'⏰3⚽2⭐⏰',
					_exercism$xelm$RunLengthEncoding$encode('⏰⚽⚽⚽⭐⭐⏰'));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'decode unicode',
			function (_p16) {
				var _p17 = _p16;
				return A2(
					_elm_community$elm_test$Expect$equal,
					'⏰⚽⚽⚽⭐⭐⏰',
					_exercism$xelm$RunLengthEncoding$decode('⏰3⚽2⭐⏰'));
			})
		]));
var _exercism$xelm$Main$emit = _elm_lang$core$Native_Platform.outgoingPort(
	'emit',
	function (v) {
		return [v._0, v._1];
	});
var _exercism$xelm$Main$main = {
	main: A2(_rtfeldman$node_test_runner$Test_Runner_Node$run, _exercism$xelm$Main$emit, _exercism$xelm$Main$tests),
	flags: _elm_lang$core$Json_Decode$value
};
