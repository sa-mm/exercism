var _exercism$xelm$Main$tests = A2(
	_elm_community$elm_test$Test$describe,
	'triangleKind',
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_community$elm_test$Test$test,
			'equilateral triangles have equal sides',
			function (_p0) {
				var _p1 = _p0;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Result$Ok(_exercism$xelm$Triangle$Equilateral),
					A3(_exercism$xelm$Triangle$triangleKind, 2, 2, 2));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'larger equilateral triangles also have equal sides',
			function (_p2) {
				var _p3 = _p2;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Result$Ok(_exercism$xelm$Triangle$Equilateral),
					A3(_exercism$xelm$Triangle$triangleKind, 10, 10, 10));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'isosceles triangles have last two sides equal',
			function (_p4) {
				var _p5 = _p4;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Result$Ok(_exercism$xelm$Triangle$Isosceles),
					A3(_exercism$xelm$Triangle$triangleKind, 3, 4, 4));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'isosceles triangles have first and last sides equal',
			function (_p6) {
				var _p7 = _p6;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Result$Ok(_exercism$xelm$Triangle$Isosceles),
					A3(_exercism$xelm$Triangle$triangleKind, 4, 3, 4));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'isosceles triangles have two first sides equal',
			function (_p8) {
				var _p9 = _p8;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Result$Ok(_exercism$xelm$Triangle$Isosceles),
					A3(_exercism$xelm$Triangle$triangleKind, 4, 4, 3));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'isosceles triangles have in fact exactly two sides equal',
			function (_p10) {
				var _p11 = _p10;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Result$Ok(_exercism$xelm$Triangle$Isosceles),
					A3(_exercism$xelm$Triangle$triangleKind, 10, 10, 2));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'scalene triangles have no equal sides',
			function (_p12) {
				var _p13 = _p12;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Result$Ok(_exercism$xelm$Triangle$Scalene),
					A3(_exercism$xelm$Triangle$triangleKind, 3, 4, 5));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'scalene triangles have no equal sides at a larger scale too',
			function (_p14) {
				var _p15 = _p14;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Result$Ok(_exercism$xelm$Triangle$Scalene),
					A3(_exercism$xelm$Triangle$triangleKind, 10, 11, 12));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'scalene triangles have no equal sides at a larger scale too 2',
			function (_p16) {
				var _p17 = _p16;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Result$Ok(_exercism$xelm$Triangle$Scalene),
					A3(_exercism$xelm$Triangle$triangleKind, 5, 4, 2));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'very small triangles are legal',
			function (_p18) {
				var _p19 = _p18;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Result$Ok(_exercism$xelm$Triangle$Scalene),
					A3(_exercism$xelm$Triangle$triangleKind, 0.4, 0.6, 0.3));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'triangles with no size are illegal',
			function (_p20) {
				var _p21 = _p20;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Result$Err('Invalid lengths'),
					A3(_exercism$xelm$Triangle$triangleKind, 0, 0, 0));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'triangles with negative sides are illegal',
			function (_p22) {
				var _p23 = _p22;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Result$Err('Invalid lengths'),
					A3(_exercism$xelm$Triangle$triangleKind, 3, 4, -5));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'triangles violating triangle inequality are illegal 1',
			function (_p24) {
				var _p25 = _p24;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Result$Err('Violates inequality'),
					A3(_exercism$xelm$Triangle$triangleKind, 1, 1, 3));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'triangles violating triangle inequality are illegal 2',
			function (_p26) {
				var _p27 = _p26;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Result$Err('Violates inequality'),
					A3(_exercism$xelm$Triangle$triangleKind, 7, 3, 2));
			})
		]));
var _exercism$xelm$Main$emit = _elm_lang$core$Native_Platform.outgoingPort(
	'emit',
	function (v) {
		return [v._0, v._1];
	});
var _exercism$xelm$Main$main = {
	main: A2(_rtfeldman$node_test_runner$Test_Runner_Node$run, _exercism$xelm$Main$emit, _exercism$xelm$Main$tests),
	flags: _elm_lang$core$Json_Decode$value
};
