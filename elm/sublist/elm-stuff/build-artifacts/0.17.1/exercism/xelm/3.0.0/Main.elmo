var _exercism$xelm$Main$tests = A2(
	_elm_community$elm_test$Test$describe,
	'Sublist',
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_community$elm_test$Test$test,
			'the solution is for the correct version of the test',
			function (_p0) {
				var _p1 = _p0;
				return A2(_elm_community$elm_test$Expect$equal, 2, _exercism$xelm$Sublist$version);
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'empty equals empty',
			function (_p2) {
				var _p3 = _p2;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_exercism$xelm$Sublist$Equal,
					A2(
						_exercism$xelm$Sublist$sublist,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[])));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'empty is a sublist of anything',
			function (_p4) {
				var _p5 = _p4;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_exercism$xelm$Sublist$Sublist,
					A2(
						_exercism$xelm$Sublist$sublist,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[1, 2])));
			})
		]));
var _exercism$xelm$Main$emit = _elm_lang$core$Native_Platform.outgoingPort(
	'emit',
	function (v) {
		return [v._0, v._1];
	});
var _exercism$xelm$Main$main = {
	main: A2(_rtfeldman$node_test_runner$Test_Runner_Node$run, _exercism$xelm$Main$emit, _exercism$xelm$Main$tests),
	flags: _elm_lang$core$Json_Decode$value
};
