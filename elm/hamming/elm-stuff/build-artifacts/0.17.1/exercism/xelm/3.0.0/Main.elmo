var _exercism$xelm$Main$tests = A2(
	_elm_community$elm_test$Test$describe,
	'Hamming',
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_community$elm_test$Test$test,
			'identical strands',
			function (_p0) {
				var _p1 = _p0;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Maybe$Just(0),
					A2(_exercism$xelm$Hamming$distance, 'A', 'A'));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'long identical strands',
			function (_p2) {
				var _p3 = _p2;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Maybe$Just(0),
					A2(_exercism$xelm$Hamming$distance, 'GGACTGA', 'GGACTGA'));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'complete distance in single nucleotide strands',
			function (_p4) {
				var _p5 = _p4;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Maybe$Just(1),
					A2(_exercism$xelm$Hamming$distance, 'A', 'G'));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'complete distance in small strands',
			function (_p6) {
				var _p7 = _p6;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Maybe$Just(2),
					A2(_exercism$xelm$Hamming$distance, 'AG', 'CT'));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'small distance in small strands',
			function (_p8) {
				var _p9 = _p8;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Maybe$Just(1),
					A2(_exercism$xelm$Hamming$distance, 'AT', 'CT'));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'small distance',
			function (_p10) {
				var _p11 = _p10;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Maybe$Just(1),
					A2(_exercism$xelm$Hamming$distance, 'GGACG', 'GGTCG'));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'small distance in long strands',
			function (_p12) {
				var _p13 = _p12;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Maybe$Just(2),
					A2(_exercism$xelm$Hamming$distance, 'ACCAGGG', 'ACTATGG'));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'non-unique character in first strand',
			function (_p14) {
				var _p15 = _p14;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Maybe$Just(1),
					A2(_exercism$xelm$Hamming$distance, 'AGA', 'AGG'));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'non-unique character in second strand',
			function (_p16) {
				var _p17 = _p16;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Maybe$Just(1),
					A2(_exercism$xelm$Hamming$distance, 'AGG', 'AGA'));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'large distance',
			function (_p18) {
				var _p19 = _p18;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Maybe$Just(4),
					A2(_exercism$xelm$Hamming$distance, 'GATACA', 'GCATAA'));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'large distance in off-by-one strand',
			function (_p20) {
				var _p21 = _p20;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Maybe$Just(9),
					A2(_exercism$xelm$Hamming$distance, 'GGACGGATTCTG', 'AGGACGGATTCT'));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'empty strands',
			function (_p22) {
				var _p23 = _p22;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Maybe$Just(0),
					A2(_exercism$xelm$Hamming$distance, '', ''));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'disallow first strand longer',
			function (_p24) {
				var _p25 = _p24;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Maybe$Nothing,
					A2(_exercism$xelm$Hamming$distance, 'AATG', 'AAA'));
			}),
			A2(
			_elm_community$elm_test$Test$test,
			'disallow second strand longer',
			function (_p26) {
				var _p27 = _p26;
				return A2(
					_elm_community$elm_test$Expect$equal,
					_elm_lang$core$Maybe$Nothing,
					A2(_exercism$xelm$Hamming$distance, 'ATA', 'AGTG'));
			})
		]));
var _exercism$xelm$Main$emit = _elm_lang$core$Native_Platform.outgoingPort(
	'emit',
	function (v) {
		return [v._0, v._1];
	});
var _exercism$xelm$Main$main = {
	main: A2(_rtfeldman$node_test_runner$Test_Runner_Node$run, _exercism$xelm$Main$emit, _exercism$xelm$Main$tests),
	flags: _elm_lang$core$Json_Decode$value
};
